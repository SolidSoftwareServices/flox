@using Ei.Rp.DomainModels.MappingValues
@using Ei.Rp.Mvc.Core.Controllers
@using Ei.Rp.Mvc.Core.Cryptography.Urls
@using EI.RP.UiFlows.Mvc.Views
@using EI.RP.WebApp.Infrastructure.Extensions
@using EI.RP.WebApp.Flows.AppFlows
@using EI.RP.WebApp.Flows.AppFlows.Accounts.Steps
@using EI.RP.WebApp.Controllers
@using EI.RP.WebApp.Infrastructure.Extensions
@using Microsoft.AspNetCore.Html

@model EI.RP.WebApp.Flows.AppFlows.Accounts.Components.AccountCardBillingDetails.ViewModel

@functions
{
    private async Task<IHtmlContent> GetLatestBillActionLink(bool isMobile = false)
    {
        Model.HasIncludedLatestBillActionLink = true;

        var classes = "btn btn-secondary";
        if (isMobile)
        {
            classes += " mb-4";
        }
        else 
        {
            classes += " d-none d-lg-inline-block";
        }

        return await Html.GetActionLinkAsync("View latest Bill",
            nameof(FilesController.GetInvoicePdf),
            typeof(FilesController).GetNameWithoutSuffix(),
            new
            {
                Model.ReferenceDocNumber,
                Model.AccountNumber
            },
            new
            {
                data_testid = "account-card-view-latest-bill-"+Model.AccountNumber,
                data_ignore_loading_overlay = "",
                @class = classes
            });
    }
}

<div class="my-accounts__item__content">
    <div class="row">
        <div class="col-3"><span>Amount due</span></div>
        <div class="col-5">
            @using (await Html.BeginUiFlowFormAsync(Model.ScreenModel))
            {
                <p class="price @(Model.IsOverdue ? "price-overdue" : string.Empty)">
                    @Model.CurrentBalanceAmount <span>@(Model.IsOverdue ? "Payment Overdue" : string.Empty)</span>
                    @if (Model.CanRequestRefund)
                    {
                        @(await Html.GetHiddenFlowStepMemberAsync<AccountSelection.ScreenModel>(x => x.SelectedAccount.AccountNumber, Model.AccountNumber, false))
                        <flow-action class="btn btn-xs"
                                     data-testid="account-card-submit-refund-request-@Model.AccountNumber"
                                     trigger-event="@AccountSelection.StepEvent.ToRequestRefund">Submit Refund Request</flow-action>
                    }
                </p>
            }
        </div>
        <div class="col-4">
            @if (Model.CanEstimateCost)
            {
                @using (await Html.BeginUiFlowFormAsync(Model.ScreenModel))
                {
                    @(await Html.GetHiddenFlowStepMemberAsync<AccountSelection.ScreenModel>(x => x.SelectedAccount.AccountNumber, Model.AccountNumber, false))
                    <flow-action data-testid="account-card-estimate-cost"
                                 class="btn btn-primary d-none d-lg-inline-block"
                                 trigger-event="@AccountSelection.StepEvent.ToEstimateCost">Estimate costs to date</flow-action>
                }
            }
            else if (Model.CanPayNow)
            {
                @using (await Html.BeginUiFlowFormAsync(Model.ScreenModel))
                {
                    @(await Html.GetHiddenFlowStepMemberAsync<AccountSelection.ScreenModel>(x => x.SelectedAccount.AccountNumber, Model.AccountNumber, false))
                    <flow-action data-testid="account-card-pay-now"
                                 class="btn btn-primary d-none d-lg-inline-block" aria-label="Pay Now, 256-bit SSL encrypted"
                                 trigger-event="@AccountSelection.StepEvent.ToMakeAPayment">Pay Now</flow-action>
                }
            }
            else if (Model.CanShowLatestBillActionLink())
            {
                @await GetLatestBillActionLink()
            }
        </div>
    </div>
    @if (Model.AreBillsAllPaid)
    {
        <div class="row">
            <div class="col-3"></div>
            <div class="col-5"><small>Thank you, your @Model.AccountType.ToString().ToLower() bills are all paid.</small></div>
            <div class="col-4">
                @if (Model.CanShowLatestBillActionLink())
                {
                    @await GetLatestBillActionLink()
                }
            </div>
        </div>
    }
    @if (Model.IsDue)
    {
        <div class="row">
            <div class="col-3"><span>Due date</span></div>
            <div class="col-5">
                <p>@(Model.PaymentMethod == PaymentMethodType.DirectDebit ? "Direct Debit set for" : string.Empty) @Model.DueDate.ToString("dnn MMMM yyyy", true)</p>
            </div>
            <div class="col-4">
                @if (Model.CanShowLatestBillActionLink())
                {
                    @await GetLatestBillActionLink()
                }
            </div>
        </div>
    }
    @if (Model.IsAlternativePayer)
    {
        <div class="row">
            <div class="col-3"></div>
            <div class="col-5">
                <small>
                    You are currently paying one or more of your energy accounts through a third party. This means that you will have limited online viewing and payment functionality. If you have any queries regarding payment amounts, please contact your Credit Union.
                </small>
            </div>
            <div class="col-4">
                @if (Model.CanShowLatestBillActionLink())
                {
                    @await GetLatestBillActionLink()
                }
            </div>
        </div>
    }
    @if (Model.CanShowCostToDate)
    {
        <div class="row">
            <div class="col-3"><span>Cost to date</span></div>
            <div class="col-5">
                <p><span>@Model.CostToDateAmount</span> * Since @Model.CostToDateSince.ToString("dnn MMMM yyyy", true)</p>
            </div>
            <div class="col-4">
                @if (Model.CanShowLatestBillActionLink())
                {
                    @await GetLatestBillActionLink()
                }
            </div>
        </div>
    }
    @if (Model.HasAccountCredit)
    {
        <div class="row">
            <div class="col-3"><span>Account Credit</span></div>
            <div class="col-5">
                <p><span>@(-Model.CurrentBalanceAmount)</span></p>
            </div>
            <div class="col-4">
                @if (Model.CanShowLatestBillActionLink())
                {
                    @await GetLatestBillActionLink()
                }
            </div>
        </div>
    }
    @if (Model.CanShowLatestBillActionLink())
    {
        <div class="row">
            <div class="col-3"></div>
            <div class="col-5"></div>
            <div class="col-4">
                @if (Model.CanShowLatestBillActionLink())
                {
                    @await GetLatestBillActionLink()
                }
            </div>
        </div>
    }
    <div class="row d-block d-lg-none">
        <div class="col-12">
            @if (Model.CanEstimateCost)
            {
                @using (await Html.BeginUiFlowFormAsync(Model.ScreenModel))
                {
                    @(await Html.GetHiddenFlowStepMemberAsync<AccountSelection.ScreenModel>(x => x.SelectedAccount.AccountNumber, Model.AccountNumber, false))
                    <flow-action data-testid="account-card-estimate-cost"
                                 class="btn btn-primary mb-4"
                                 trigger-event="@AccountSelection.StepEvent.ToEstimateCost">Estimate costs</flow-action>
                }
            }
            else if (Model.CanPayNow)
            {
                @using (await Html.BeginUiFlowFormAsync(Model.ScreenModel))
                {
                    @(await Html.GetHiddenFlowStepMemberAsync<AccountSelection.ScreenModel>(x => x.SelectedAccount.AccountNumber, Model.AccountNumber, false))
                    <flow-action data-testid="account-card-pay-now"
                                 class="btn btn-primary mb-4" aria-label="Pay Now, 256-bit SSL encrypted"
                                 trigger-event="@AccountSelection.StepEvent.ToMakeAPayment">Pay Now</flow-action>
                }
            }
            @if (Model.CanShowLatestBillActionLink(true))
            {
                @await GetLatestBillActionLink(true)
            }
        </div>
    </div>
</div>
