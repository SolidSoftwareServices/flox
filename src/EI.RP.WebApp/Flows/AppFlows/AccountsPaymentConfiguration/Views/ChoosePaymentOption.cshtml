@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.FlowDefinitions

@model EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps.ChoosePaymentOption.ScreenModel

@{
	const string layoutViewsLocationPrefix = "./ChoosePaymentOption/Layouts/";
}

@switch (Model.StartType)
{
	case AccountsPaymentConfigurationFlowStartType.AddGasAccount:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_AddGasLayout.cshtml", Model)
		break;
	case AccountsPaymentConfigurationFlowStartType.MoveElectricity:
	case AccountsPaymentConfigurationFlowStartType.MoveGas:
	case AccountsPaymentConfigurationFlowStartType.MoveOneAndAddAnother:
	    @await Html.PartialAsync($"{layoutViewsLocationPrefix}_MoveElectricityOrGasOnlyLayout.cshtml", Model)
		break;
	case AccountsPaymentConfigurationFlowStartType.MoveElectricityAndGas:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_MoveElectricityAndGasLayout.cshtml", Model)
		break;
    case AccountsPaymentConfigurationFlowStartType.MoveElectricityAndCloseGas:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_MoveElectricityAndCloseGasLayout.cshtml", Model)
		break;
    case AccountsPaymentConfigurationFlowStartType.SmartActivation:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_SmartActivationLayout.cshtml", Model)
		break;
    default:
		throw new ArgumentOutOfRangeException($"{Model.StartType} not supported");
}
