@using Ei.Rp.DomainModels.MappingValues
@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.FlowDefinitions

@model EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps.ChoosePaymentOption.ScreenModel

@{
    const string partialViewsLocationPrefix = "./../Parts/SmartActivation/";
    const string popupsViewsLocationPrefix = "./../Popups/";
    const string actionViewsLocationPrefix = "./../Actions/";
    if (!new[] {
AccountsPaymentConfigurationFlowStartType.SmartActivation

}.Contains(Model.StartType))
    {
        throw new ArgumentOutOfRangeException();
    }

    string GetHeadingText()
    {
        if (Model.ExistingPaymentMethod == PaymentMethodType.DirectDebitNotAvailable)
        {
            return "Payment details";
        }
        if (Model.ExistingPaymentMethod == PaymentMethodType.DirectDebit)
        {
            return "Choose a payment option";
        }
        return $"Get a {(Model.IsDualFuelAccount ? 8 : 5)}% discount when you sign up for direct debit";
    }
}

<div class="container page-container pb-0">
    <div class="row">
        <div class="offset-md-1 col-md-10">
            <h1 class="text-primary page-title text-center mb-5" data-testid="smart-activation-payment-heading">@GetHeadingText()</h1>
            <hr class="my-5" aria-hidden="true">
        </div>
    </div>
</div>
<div class="row" data-testid="payment-options-container">
    @if (Model.ExistingPaymentMethod == PaymentMethodType.DirectDebit)
    {
        <div class="portal-main setup-dd pt-0 offset-lg-1 col-lg-10 col-md-12">
            <div class="container">
                <div class="portal-details pt-0">
                    <div class="row plans">
                        @await Html.PartialAsync($"{partialViewsLocationPrefix}_UseExistingDirectDebit.cshtml", Model)
                        @await Html.PartialAsync($"{partialViewsLocationPrefix}_SetUpNewDirectDebitOption.cshtml", Model)
                    </div>
                </div>
            </div>
        </div>
    }
    else if (Model.ExistingPaymentMethod == PaymentMethodType.Manual || Model.ExistingPaymentMethod == PaymentMethodType.ESBPremises)
    {
        @await Html.PartialAsync($"{partialViewsLocationPrefix}_SetUpNewDirectDebitOption.cshtml", Model)
    }
    else if (Model.ExistingPaymentMethod == PaymentMethodType.DirectDebitNotAvailable)
    {
        @await Html.PartialAsync($"{partialViewsLocationPrefix}_AlternativePayerMessage.cshtml", Model)
    }
    else
    {
        throw new NotSupportedException($"{Model.ExistingPaymentMethod}: payment method not supported");
    }
</div>

@await Html.PartialAsync($"{popupsViewsLocationPrefix}_SetupDirectDebitPopup.cshtml", Model)
