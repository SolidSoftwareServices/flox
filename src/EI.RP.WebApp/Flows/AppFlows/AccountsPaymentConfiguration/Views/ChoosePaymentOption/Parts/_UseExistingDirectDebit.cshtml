@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering
@using EI.RP.WebApp.Infrastructure.Extensions
@using EI.RP.WebApp.Flows.AppFlows
@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.FlowDefinitions
@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps

@model EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps.ChoosePaymentOption.ScreenModel;

@{
    var showSingleSetUpForMultipleAccountsOption = new[]
    {
        AccountsPaymentConfigurationFlowStartType.MoveOneAndAddAnother,
        AccountsPaymentConfigurationFlowStartType.MoveElectricityAndGas,

    }.Contains(Model.StartType);
}

<div class="col-12 col-lg-6 mb-5">
    <div class="card border h-100">
        <div class="card-body p-5 h-100 d-flex flex-column">
            <fieldset>
                <legend>
                    <div class="card-title-wrapper">
                        <h5 id="useExistingDirectDebitHeader" class="card-title font-col-title card-title-large mt-0 mb-5 text-center" data-testid="payment-option-existing-dd-title">Use Existing Direct Debit</h5>
                    </div>
                </legend>
                <p class="card-text card-text--flex-auto-adjust mb-5" id="existingDirectDebitDivContent" data-testid="payment-option-existing-dd-text">You have Direct Debit already set up to pay your bills.</p>
                @using (await Html.BeginUiFlowFormAsync(Model))
                {
                    @await Html.SecureHiddenForAsync(m => m.HasAnyExistingPaymentMethodOfDirectDebit, false)
                    @await Html.SecureHiddenForAsync(m => m.StartType, false)

                    <div class="form-group form-check pt-0 mt-0 mr-0 mb-5">
                        @if (showSingleSetUpForMultipleAccountsOption && !Model.HasBothAccountsExistingPaymentMethodIsDirectDebit)
                        {
                            <div class="custom-control custom-checkbox mb-4" id="useForBoth">
                                @Html.CheckBoxFor(model => model.UseExistingSingleSetupForAllAccounts,
                                    new { @class = "custom-control-input", id = "useExistingSingleSetupForAllAccounts", name = "useExistingSingleSetupForAllAccounts" })
                                <label id="lblUseExistingSingleSetupForAllAccounts"
                                       class="custom-control-label pr-0 form-info font-smaller"
                                       for="useExistingSingleSetupForAllAccounts">Use this Direct Debit to make payments for both my Electricity and Gas accounts.</label>
                            </div>
                        }
                        <div class="custom-control custom-checkbox" id="continueDebit">
                            @Html.CheckBoxFor(model => model.HasConfirmedDetailsAreCorrect,
                                new { @class = "custom-control-input", id = "confirmContinueDebit" })
                            <label id="lblConfirmContinueDebit"
                                   class="custom-control-label pr-0 form-info font-smaller"
                                   for="confirmContinueDebit">I confirm that all of the details are correct and that I have the authority to make this submission *</label>
                            @Html.ValidationMessageFor(model => model.HasConfirmedDetailsAreCorrect, string.Empty, new { @class = "alert alert-form alert-danger w-100" })
                        </div>
                    </div>
                    <div class="card-buttons">
                        <flow-action id="useExistingDirectDebit" class="btn btn-primary line-height-for-btns"
                                     trigger-event="@ChoosePaymentOption.StepEvent.UseExistingDirectDebitSelected">Use existing direct debit</flow-action>
                    </div>
                }
            </fieldset>
        </div>
    </div>
</div>
