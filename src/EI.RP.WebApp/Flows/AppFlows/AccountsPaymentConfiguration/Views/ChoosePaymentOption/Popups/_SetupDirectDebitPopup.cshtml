@using Ei.Rp.DomainModels.MappingValues
@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering
@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.FlowDefinitions
@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps
@using EI.RP.WebApp.Infrastructure.Extensions
@model EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps.ChoosePaymentOption.ScreenModel

@{
    if (!new[]
    {
AccountsPaymentConfigurationFlowStartType.SmartActivation,
}.Contains(Model.StartType))
    {
        throw new ArgumentOutOfRangeException();
    }
}
@if (Model.ExistingPaymentMethod == PaymentMethodType.DirectDebit)
{
    <div class="modal modal-lg fade" id="modal-setup-new" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-testid="setup-new-dd-popup" data-trap-focus>
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div class="container page-container my-3 m-lg-5 p-5">
                    <div class="row">
                        <div class="offset-1 col-10">
                            <h2 class="text-primary page-title text-left mb-5">Set up new direct debit</h2>
                            <hr class="my-5"/>
                            @using (await Html.BeginUiFlowFormAsync(Model, className: "direct-debit"))
                            {
                                @await Html.SecureHiddenForAsync(m => m.StartType, false)

                                <div class="form-group w-100 mb-5">
                                    <label>Name on Bank Account</label>
                                    @Html.TextBoxFor(model => model.NameOnBankAccount, new
                                    {
                                        id = "customer-name",
                                        @class = "form-control w-100",
                                        maxlength = "40",
                                        type = "text",
                                        placeholder = "Enter full name of account holder here",
                                        aria_label = "Full name of account holder"
                                    })
                                    @Html.ValidationMessageFor(model => model.NameOnBankAccount, "", new
                                    {
                                        id = "customer-name-error",
                                        @class = "alert alert-form alert-danger"
                                    })
                                    @if (Model.IsNameOnBankAccountInvalid)
                                    {
                                        <div id="customer-name-error" class="alert alert-form alert-danger" role="alert">Please enter a Bank Account name</div>
                                    }
                                </div>
                                <div class="form-group w-100 mb-5">
                                    <label class="mb-0" for="iban">IBAN</label>
                                    <small class="form-text text-muted">Up to 24 digits containing numbers and letters</small>
                                    @Html.TextBoxFor(model => model.UserInputIBAN, new
                                    {
                                        id = "iban",
                                        @class = "form-control w-100",
                                        maxlength = "40",
                                        placeholder = "Enter IBAN here",
                                        aria_label = "IBAN"
                                    })
                                    @Html.ValidationMessageFor(model => model.UserInputIBAN, "", new
                                    {
                                        id = "iban-error",
                                        @class = "alert alert-form alert-danger"
                                    })
                                    @if (Model.IsIbanInvalid)
                                    {
                                        <div id="iban-error" class="alert alert-form alert-danger" role="alert">Please enter a valid IBAN</div>
                                    }
                                </div>
                                <div class="btn-container btn-container--center">
                                    <flow-action id="addDebitCard" class="btn btn-primary line-height-for-btns"
                                                 trigger-event="@ChoosePaymentOption.StepEvent.SetUpNewDirectDebit">Set up New Direct Debit</flow-action>
                                </div>

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Model.IsNameOnBankAccountInvalid || Model.IsIbanInvalid || Model.Errors.Any(x => x.MemberName.Equals(nameof(Model.NameOnBankAccount)) || x.MemberName.Equals(nameof(Model.UserInputIBAN))))
     {
         <script>
             $(function() {
                 $('[data-target="#modal-setup-new"]').click();
             });
         </script>
     }
}