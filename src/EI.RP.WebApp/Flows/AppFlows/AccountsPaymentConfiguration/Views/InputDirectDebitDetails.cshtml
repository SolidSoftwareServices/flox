@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering
@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps
@model EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.Steps.InputDirectDebitDetails.ScreenModel
@{
    const string layoutViewsLocationPrefix = "./InputDirectDebit/Layouts/";
}

@switch (Model.ViewMode)
{
	case InputDirectDebitDetails.ScreenModel.StepMode.DefaultSetUp:
	case InputDirectDebitDetails.ScreenModel.StepMode.DefaultEdit:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_DefaultLayout.cshtml", Model)
		break;
	case InputDirectDebitDetails.ScreenModel.StepMode.EqualizerSetup:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_EqualizerSetupLayout.cshtml", Model)
		break;
	case InputDirectDebitDetails.ScreenModel.StepMode.GasAccountSetUp:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_AddGasLayout.cshtml", Model)
		break;
	case InputDirectDebitDetails.ScreenModel.StepMode.MoveElectricity:
	case InputDirectDebitDetails.ScreenModel.StepMode.MoveGas:
	case InputDirectDebitDetails.ScreenModel.StepMode.MultipleAccountsSetUp:
		@await Html.PartialAsync($"{layoutViewsLocationPrefix}_MoveElectricityOrGasOnlyLayout.cshtml", Model)
		break;
	default:
		throw new ArgumentOutOfRangeException($"{Model.ViewMode} not supported");
}