@using Ei.Rp.DomainModels.MappingValues
@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering
@using EI.RP.WebApp.Infrastructure.Extensions
@using EI.RP.WebApp.Flows.AppFlows.MeterReadings.Steps

@model EI.RP.WebApp.Flows.AppFlows.MeterReadings.Steps.SubmitMeterReading.ScreenModel

@{
    var modalId = "#modalMeterReadingTooltip24h";

    if (Model.AccountType == ClientAccountType.Gas)
    {
        modalId = "#modalMeterReadingTooltipGas";
    }
    else if (Model.HasElectricityDayNightMeter)
    {
        modalId = "#modalMeterReadingTooltipDayNight";
    }
}
@if (Model.CanSubmitMeterReading)
{
    @using (await Html.BeginUiFlowFormAsync(Model))
    {
        <div class="portal-details__form meter-reading" data-testid="submit-meter-reading">
            <h2>Submit Your Meter Reading</h2>
            <p>The accuracy of your bill can be improved by submitting a reading below.</p>

            @await Html.SecureHiddenForAsync(m=>Model.CanSubmitMeterReading, false)
            @foreach (var meterReader in Model.MeterReadings)
            {
                var index = Array.IndexOf(Model.MeterReadings, meterReader);
                @await Html.SecureHiddenForAsync(m => Model.MeterReadings[index].DeviceId, false)
                @await Html.SecureHiddenForAsync(m => Model.MeterReadings[index].MeterNumber, false)
                @await Html.SecureHiddenForAsync(m => Model.MeterReadings[index].RegisterId, false)
                @await Html.SecureHiddenForAsync(m => Model.MeterReadings[index].MeterTypeName, false)
                @await Html.SecureHiddenForAsync(m => Model.MeterReadings[index].MeterUnit, false)
                @await Html.SecureHiddenForAsync(m => Model.MeterReadings[index].MeterLabel, false)
                @await Html.SecureHiddenForAsync(m => Model.MeterReadings[index].MaskedMeterNumber, false)

                <div class="form-group w-100">
                    <label for="@Model.MeterReadings[index].MeterNumber">@Model.MeterReadings[index].MeterLabel Meter Reading</label>
                    <p class="small mt-0 mb-3">Meter Number: @Model.MeterReadings[index].MaskedMeterNumber</p>
                    <div class="input-group w-100">
                        @Html.TextBoxFor(m => Model.MeterReadings[index].ReadingValue, new
                        {
                            @class = "form-control",
                            maxlength = "7",
                            title = Model.MeterReadings[index].MeterNumber,
                            placeholder = "00000",
                            data_testid = $"reading-value-input-{index+1}",
                            aria_label = $"{Model.MeterReadings[index].MeterLabel} Meter Reading, Meter number ending in {Model.MeterReadings[index].MeterNumber.Substring(meterReader.MeterNumber.Length - 4)}, {Model.MeterReadings[index].MeterUnit}",
                            inputmode = "numeric"
                        })
                        <div class="input-group-append">
                            <span class="input-group-text" id=@($"input_{Model.MeterReadings[index].MeterNumber}")>
                                @Model.MeterReadings[index].MeterUnit
                            </span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(m => Model.MeterReadings[index].ReadingValue, "", new { @class = "alert alert-form alert-danger", role = "alert" }, "div")

                @if (index == Model.MeterReadings.Length - 1)
                {
                    <p class="smaller" data-testid="meter-reading-how-do-i-read-message">
                        How do I read my meter?
                        <button type="button" class="portal-details__form__info__icon border-0" aria-label="How do I read my meter?" data-testid="meter-reading-how-do-i-read-message-link"
                                data-toggle="modal" data-target="@modalId"></button>
                    </p>
                    <p class="smaller"><span>* required</span></p>
                }
            </div>
            }

            <div>
                <flow-action class='btn btn-primary' data-testid="submit-meter-reading-button"
                             trigger-event=@SubmitMeterReading.StepEvent.SubmitMeterReading>Submit Meter Reading</flow-action>
            </div>
        </div>
    }

}
