@using Ei.Rp.DomainModels.MappingValues
@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering
@using EI.RP.UiFlows.Mvc.Components.PreLoad
@using EI.RP.WebApp.Infrastructure.Extensions
@using EI.RP.WebApp.Flows.AppFlows
@using EI.RP.WebApp.Flows.AppFlows.MovingHouse.Steps

@model EI.RP.WebApp.Flows.AppFlows.MovingHouse.Steps.Step2InputPrns.ScreenModel

@functions
{
    enum PageComponent
    {
        MovingHouseHeader = 1,
    }
}

@{
    var gprnDivId = Model.ShowMPRNGPRNInput ? "inputGPRN" : "inputMPRN";
    var errorMessage = "";

    var submitButtonText = "Submit New MPRN/GPRN";
    var tryNewPrnsButtonText = "Try New MPRN/GRPN again";

    if (Model.ShowMPRNGPRNInput)
    {
        if (!Model.MPRNExist || !Model.PrnsAreFromSameAddress)
        {
            errorMessage = "There seems to be a problem with the MPRN and GPRN - our system does not recognise them. Remember the MPRN and GPRN must be from electricity and gas meters at the same address";
        }
    }
    else if (Model.ShowElectricityAccount)
    {
        submitButtonText = "Submit New MPRN";
        if (!Model.MPRNExist)
        {
            errorMessage = "There seems to be a problem with the MPRN, our system does not recognise it. Remember the MPRN must be from the address of your new home.";
            tryNewPrnsButtonText = "Try New MPRN again";
        }
    }
    else if (Model.ShowGasAccount)
    {
        submitButtonText = "Submit New GPRN";
        if (!Model.MPRNExist)
        {
            errorMessage = "There seems to be a problem with the GPRN, our system does not recognise it. Remember the GPRN must be from the address of your new home.";
            tryNewPrnsButtonText = "Try New GRPN again";
        }
    }

    var componentPreLoader = new ComponentPreLoader<PageComponent>(Component, Model);

    componentPreLoader.StartLoading<EI.RP.WebApp.Flows.AppFlows.MovingHouse.Components.MovingHouseHeader.Component>(PageComponent.MovingHouseHeader,
        new EI.RP.WebApp.Flows.AppFlows.MovingHouse.Components.MovingHouseHeader.InputModel
        {
            MovingHouseType = Model.MovingHouseType,
            StepNumber = 2
        });
}

<main class="plan" data-page="mimo-2-input">
    <div class="container">
        <div class="portal-details">
            @await componentPreLoader.Render(PageComponent.MovingHouseHeader)
            <h2 class="landing-head" id="inputTitle" data-testid="mimo-2-input-header">
                @if (Model.ShowMPRNGPRNInput)
                {
                    @:Enter your new MPRN and GPRN
                }
                else if (Model.ShowElectricityAccount)
                {
                    @:Enter your new MPRN
                }
                else if (Model.ShowGasAccount)
                {
                    @:Enter your new GPRN
                }
            </h2>
            <span class="form-info form-info-header" data-testid="mimo-2-input-subheader">We need to confirm the address for the property you are moving into.</span>

            @if (!Model.MPRNExist || !Model.PrnsAreFromSameAddress)
            {
                <div class="alert alert-form alert-danger w-100 mt-5 mb-5">
                    @errorMessage
                </div>
            }

            @using (await Html.BeginUiFlowFormAsync(Model, className: "moving-form"))
            {
                @await Html.SecureHiddenForAsync(m => m.ExistingGPRN, false)
                @await Html.SecureHiddenForAsync(m => m.ExistingMPRN, false)
                @await Html.SecureHiddenForAsync(m => m.ShowMPRNGPRNInput, false)
                @await Html.SecureHiddenForAsync(m => m.MPRNExist, false)
                @await Html.SecureHiddenForAsync(m => m.GPRNExist, false)
                @await Html.SecureHiddenForAsync(m => m.ShowElectricityAccount, false)
                @await Html.SecureHiddenForAsync(m => m.ShowGasAccount, false)

                @if (Model.ShowElectricityAccount || Model.ShowMPRNGPRNInput)
                {
                    <div class="form-group mt-5 mb-5" id="inputMPRN">
                        <label id="lblMRPN" for="mprn">MPRN <button type="button" class="portal-details__form__info__icon border-0" aria-label="Information about MPRN" data-toggle="tooltip" data-placement="right" title="" data-original-title="The MPRN is an 11 digit number and starts with 10. It can be found on the front of the Electricity bill or from the previous owner or landlord."></button></label>
                        @Html.TextBoxFor(model => model.NewMPRN, new { id = "mprn", @class = "form-control w-100 mb-2", type = "tel", placeholder = "MPRN", maxlength = "11" })
                        @if (!Model.MPRNExist || !Model.PrnsAreFromSameAddress)
                        {
                            <div class="alert alert-form alert-danger" role="alert">Please enter a valid MPRN</div>
                        }
                        @Html.ValidationMessageFor(model => model.NewMPRN, "", new { @class = "alert alert-form alert-danger w-100" })
                    </div>
                }
                @if ((Model.ShowGasAccount || Model.ShowMPRNGPRNInput) && Model.MovingHouseType != MovingHouseType.MoveElectricityAndCloseGas)
                {
                    if (Model.ShowElectricityAccount || Model.ShowMPRNGPRNInput)
                    {
                        <hr />
                    }

                    <div class="form-group mt-5 mb-5" id="@gprnDivId">
                        <label id="lblGPRN" for="gprn">GPRN <button type="button" class="portal-details__form__info__icon border-0" aria-label="Information about GPRN" data-toggle="tooltip" data-placement="right" title="" data-original-title="Your GPRN identifies your gas supply and can be found on the top right of the Gas bill or from the previous owner or landlord."></button></label>
                        @Html.TextBoxFor(model => model.NewGPRN, new { id = "gprn", @class = "form-control w-100 mb-2", type = "tel", placeholder = "GPRN", maxlength = "7" })
                        @Html.ValidationMessageFor(model => model.NewGPRN, "", new { @class = "alert alert-form alert-danger w-100" })
                    </div>
                }

                <div class="portal-details__form__buttons">
                    @if (!Model.MPRNExist || !Model.PrnsAreFromSameAddress)
                    {
                        <flow-action class="btn btn-primary line-height-for-btns" id="btnTryNewPRN"
                                     trigger-event="@Step2InputPrns.StepEvent.SubmitNewPRNS">@tryNewPrnsButtonText</flow-action>
                                }
                                else
                                {
                                    <flow-action class="btn btn-primary line-height-for-btns" id="submitNewPRNs"
                                                 trigger-event="@Step2InputPrns.StepEvent.SubmitPRNS">@submitButtonText</flow-action>
                                            }
                    <a id="btnCancel" href="#" data-toggle="modal" data-target="#modal-cancel-mimo" class="btn btn-xs btn--no-before btn--no-after btn--no-padding green">Cancel</a>
                </div>

                @if (!Model.MPRNExist || !Model.PrnsAreFromSameAddress)
                {
                    <p id="needHelpContent" class="form-info my-5 form-info-footer" data-testid="mimo-2-help-message">Need help? Contact us on 1850 372 372 to complete your move.</p>
                }
            }
        </div>
    </div>
</main>

@await Html.PartialAsync($"./SharedPartialViews/_Popup_Cancel.cshtml", Model)
