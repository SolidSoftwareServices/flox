@using EI.RP.CoreServices.System
@using Ei.Rp.DomainModels.Contracts
@using Ei.Rp.DomainModels.MappingValues
@using EI.RP.WebApp.Infrastructure.Extensions
@using EI.RP.WebApp.Flows.AppFlows
@using EI.RP.WebApp.Flows.AppFlows.AccountsPaymentConfiguration.FlowDefinitions
@using EI.RP.WebApp.Flows.AppFlows.MovingHouse.Steps

@model EI.RP.WebApp.Flows.AppFlows.MovingHouse.Steps.Step5ReviewAndComplete.ScreenModel

@{
    AccountsPaymentConfigurationResult.AccountConfigurationInfo primaryAccount = Model.PaymentInfo.First(x => !x.IsNewAccount);
    AccountsPaymentConfigurationResult.AccountConfigurationInfo secondaryAccount = null;
    if (Model.PaymentInfo.Count() > 1)
    {
        secondaryAccount = Model.PaymentInfo.Last(x => x != primaryAccount);
    }

    @if (Model.MovingHouseType.IsOneOf( MovingHouseType.MoveElectricityAndAddGas , MovingHouseType.MoveGasAndAddElectricity))
    {
        primaryAccount = Model.PaymentInfo.First();
        secondaryAccount = Model.PaymentInfo.Last();
    }

    var accountType = @primaryAccount.Account != null ? @primaryAccount.Account.ClientAccountType : ClientAccountType.Electricity;
}

<h2 id="paymentMethodHeader">Payment Method</h2>
<div class="review">
    <div class="row">
        <div class="col-lg-6">
            <h3 id="primaryAccountType">@accountType payment</h3>
            <p class="mb-5" id="primaryPaymentType">
                @if (primaryAccount.SelectedPaymentSetUpType == PaymentSetUpType.Manual)
                {
                    @:@primaryAccount.SelectedPaymentSetUpType payments
                }
                else
                {
                    @:Direct Debit: <span>IBAN @primaryAccount.CommandToExecute?.IBAN.Mask('*', @primaryAccount.CommandToExecute.IBAN.Length - 4)</span>
                }
            </p>
            @using (await Html.BeginUiFlowFormAsync(Model))
            {
                <flow-action class="btn btn-secondary" id="primaryPaymentEdit"
                             trigger-event="@Step5ReviewAndComplete.StepEvent.ToPaymentOptions">Edit</flow-action>
            }
        </div>
        @if (secondaryAccount != null)
        {
            <div class="col-lg-6 mt-5 mt-lg-0">
                <h3 id="secondaryAccountType">Gas payment</h3>
                <p class="mb-5" id="secondaryPaymentType">
                    @if (secondaryAccount.SelectedPaymentSetUpType == PaymentSetUpType.Manual)
                    {
                        @:@secondaryAccount.SelectedPaymentSetUpType payments
                    }
                    else
                    {
                        @:Direct Debit: <span>IBAN @secondaryAccount.CommandToExecute?.IBAN.Mask('*', secondaryAccount.CommandToExecute.IBAN.Length - 4)</span>
                    }
                </p>
                @using (await Html.BeginUiFlowFormAsync(Model))
                {
                    <flow-action class="btn btn-secondary" id="secondaryPaymentEdit"
                                 trigger-event="@Step5ReviewAndComplete.StepEvent.ToPaymentOptions">Edit</flow-action>
                }
            </div>
        }
    </div>
</div>
