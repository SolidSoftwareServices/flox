@using Ei.Rp.DomainModels.MappingValues
@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering

@model EI.RP.WebApp.Flows.AppFlows.MovingHouse.Steps.Step1InputCloseAccountDetails.ScreenModel

<h2 id="forwardingAddress">Your Forwarding Address</h2>
<p>Please choose type of billing address *</p>

<div class="form-group form-check form-radio">
    <label for="">Do you know the name and phone number of the incoming occupant or landlord or letting agent?</label>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => m.AddressType, AddressType.RepublicOfIreland, new { @class = "custom-control-input", id = "ire", name = "addressType" })
        @Html.Label("", "Republic of Ireland postal address", new { @for = "ire", @class = "custom-control-label" })
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => m.AddressType, AddressType.PO, new { @class = "custom-control-input", id = "PoBox", name = "addressType" })
        @Html.Label("", "PO box", new { @for = "PoBox", @class = "custom-control-label" })
    </div>
    <div class="custom-control custom-radio">
        @Html.RadioButtonFor(m => m.AddressType, AddressType.NI, new { @class = "custom-control-input", id = "nonIre", name = "addressType" })
        @Html.Label("", "Non Republic of Ireland postal address", new { @for = "nonIre", @class = "custom-control-label" })
    </div>
    @await Html.SecureHiddenForAsync(m => m.AddressType, false)
    @Html.HiddenFor(m => m.ROIAddress.IsROIBoxFieldRequired, new { @id = "isROIBoxFieldRequired" })
    @Html.HiddenFor(m => m.PostalAddress.IsPOBoxFieldRequired, new { @id = "isPOBoxFieldRequired" })
    @Html.HiddenFor(m => m.NIAddress.IsNIFieldRequired, new { @id = "isNIFieldRequired" })
</div>

<div class="form-group w-100 d-none" id="ROI">
    <span id="ireTitle" class="d-none">Republic of Ireland postal address</span>
    <div id="AddressLine1">
        <label id="lblRoiAddressLine1" for="ROI-address-line-1">Address Line 1</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.ROIAddress.AddressLine1, new { @class = "form-control force-border", id = "roiAddressLine1", placeholder = "Address Line 1" })
        </div>
    </div>
    <div id="houseNumber">
        <label id="lblRoiHouseNumber" for="meter-reading-day-2">House Number *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.ROIAddress.HouseNumber, new { @class = "form-control force-border", id = "roiHouseNumber", placeholder = "House Number" })
            @Html.ValidationMessageFor(model => model.ROIAddress.HouseNumber, "", new { @class = "alert alert-form alert-danger w-100", id = "roiHouseNumberError" })
        </div>
    </div>
    <div id="street">
        <label id="lblRoiStreet" for="meter-reading-day-2">Street Name *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.ROIAddress.Street, new { @class = "form-control force-border", id = "roiStreet", placeholder = "Street" })
            @Html.ValidationMessageFor(model => model.ROIAddress.Street, "", new { @class = "alert alert-form alert-danger w-100", id = "roiStreetError" })
        </div>
    </div>
    <div class="input-field" id="AddressLine2">
        <label id="lblRoiAddressLine2" for="meter-reading-day-2">Address Line 2</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.ROIAddress.AddressLine2, new { @class = "form-control force-border", id = "roiAddressLine2", placeholder = "Address Line 2" })
        </div>
    </div>
    <div class="input-field" id="town">
        <label id="lblRoiTown" for="meter-reading-day-2">Town *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.ROIAddress.Town, new { @class = "form-control force-border", id = "roiTown", placeholder = "Town" })
            @Html.ValidationMessageFor(model => model.ROIAddress.Town, "", new { @class = "alert alert-form alert-danger w-100", id = "roiTownError" })
        </div>
    </div>
    <div id="County">
        <label id="lblRoiCounty" for="@Html.IdFor(model => model.ROIAddress.County)">County *</label>
        <div class="input-group w-100 portal-details__form meter-reading form-select">
            <div class="position-relative w-100">
                @Html.DropDownListFor(model => model.ROIAddress.County, new SelectList(Model.ROIAddress.RegionList, "RegionID", "Name"), "Select County", new Dictionary<string, object>() { { "class", "form-control force-border custom-select w-100" } })
                <span class="form-select-arrow"></span>
            </div>
            @Html.ValidationMessageFor(model => model.ROIAddress.County, "", new { @class = "alert alert-form alert-danger w-100", id = "roiCountyError" })
        </div>
    </div>
    <div id="postalCode">
        <label id="lblRoiPostCode" for="meter-reading-day-2">Post Code</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.ROIAddress.PostalCode, new { @class = "form-control force-border", id = "roiPostalCode", placeholder = "Post Code" })
        </div>
    </div>
</div>

<div class="form-group w-100 d-none" id="PO">
    <span class="d-none">PO Box</span>
    <div>
        <label id="lblPOBoxNumber" for="POBoxNumber">PO Box Number *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.PostalAddress.POBoxNumber, new { @class = "form-control force-border", id = "POBoxNumber", placeholder = "PO Box Number", type = "tel" })
            @Html.ValidationMessageFor(model => model.PostalAddress.POBoxNumber, "", new { @class = "alert alert-form alert-danger w-100", id = "poPOBoxNumberError" })
        </div>
    </div>
    <div>
        <label id="lblPOBoxPostCode" for="POBoxPostCode">PO Box Post Code *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.PostalAddress.POBoxPostCode, new { @class = "form-control force-border", id = "POBoxPostCode", placeholder = "PO Box Post Code" })
            @Html.ValidationMessageFor(model => model.PostalAddress.POBoxPostCode, "", new { @class = "alert alert-form alert-danger w-100", id = "poPOBoxPostCodeError" })
        </div>
    </div>
    <div id="District">
        <label id="lblPoDistrict" for="poDistrict">PO Box County/State *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.PostalAddress.District, new { @class = "form-control force-border District", placeholder = "PO Box County/State", id = "poDistrict" })
            @Html.ValidationMessageFor(model => model.PostalAddress.District, "", new { @class = "alert alert-form alert-danger w-100", id = "poDistrictError" })
        </div>
    </div>
    <div>
        <label id="lblPoBoxCountry" for="@Html.IdFor(model => model.PostalAddress.Country)">PO Box Country *</label>
        <div class="input-group w-100 portal-details__form meter-reading form-select">
            <div class="position-relative w-100">
                @Html.DropDownListFor(model => model.PostalAddress.Country, new SelectList(Model.PostalAddress.CountryList, "CountryID", "Name"), "Select Country", new Dictionary<string, object>() { { "class", "form-control force-border custom-select w-100" } })
                <span class="form-select-arrow"></span>
            </div>
            @Html.ValidationMessageFor(model => model.PostalAddress.Country, "", new { @class = "alert alert-form alert-danger w-100", @id = "poCountryError" })
        </div>
    </div>
</div>

<div class="form-group w-100 d-none" id="NI">
    <span id="niHeader" class="d-none">Non-Republic of Ireland postal address</span>
    <div id="Countrylists">
        <label id="lblNICountryList" for="@Html.IdFor(model => model.NIAddress.Country)">Country *</label>
        <div class="input-group w-100 portal-details__form meter-reading form-select">
            <div class="position-relative w-100">
                @Html.DropDownListFor(model => model.NIAddress.Country, new SelectList(Model.NIAddress.CountryList, "CountryID", "Name"), "Select Country", new Dictionary<string, object>() { { "class", "form-control force-border custom-select w-100" } })
                <span class="form-select-arrow"></span>
            </div>
            @Html.ValidationMessageFor(model => model.NIAddress.Country, "", new { @class = "alert alert-form alert-danger w-100", id = "niCountryError" })
        </div>
    </div>
    <div>
        <label id="lblNiAddressline1" for="niAddressline1">Address Line 1</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.NIAddress.AddressLine1, new { @class = "form-control force-border", id = "niAddressline1", placeholder = "Address Line 1" })
        </div>
    </div>
    <div id="houseNumber">
        <label id="lblNiHouseNumber" for="niHouseNumber">House Number *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.NIAddress.HouseNumber, new { @class = "form-control force-border", id = "niHouseNumber", placeholder = "House Number" })
            @Html.ValidationMessageFor(model => model.NIAddress.HouseNumber, "", new { @class = "alert alert-form alert-danger w-100", id = "niHouseNumberError" })
        </div>
    </div>
    <div id="Street">
        <label id="lblNiStreet" for="niStreet"> Street Name *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.NIAddress.Street, new { @class = "form-control force-border", id = "niStreet", placeholder = "Street" })
            @Html.ValidationMessageFor(model => model.NIAddress.Street, "", new { @class = "alert alert-form alert-danger w-100", id = "niStreetError" })
        </div>
    </div>
    <div>
        <label id="lblNiAddressline2" for="niAddressline2">Address Line 2</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.NIAddress.AddressLine2, new { @class = "form-control force-border", id = "niAddressline2", placeholder = "Address Line 2" })
        </div>
    </div>
    <div>
        <label id="lblNiTown" for="niTown">City / Town *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.NIAddress.Town, new { @class = "form-control force-border", id = "niTown", placeholder = "City / Town" })
            @Html.ValidationMessageFor(model => model.NIAddress.Town, "", new { @class = "alert alert-form alert-danger w-100", id = "niTownError" })
        </div>
    </div>
    <div>
        <label id="lblNiPostCode" for="niPostCode">Post Code *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.NIAddress.PostCode, new { @class = "form-control force-border", id = "niPostCode", placeholder = "Post Code" })
            @Html.ValidationMessageFor(model => model.NIAddress.PostCode, "", new { @class = "alert alert-form alert-danger w-100", id = "niPostCodeError" })
        </div>
    </div>
    <div id="Dist">
        <label id="lblniDistrict" for="niDistrict">County / State *</label>
        <div class="input-group w-100 portal-details__form meter-reading">
            @Html.TextBoxFor(model => model.NIAddress.District, new { @class = "form-control force-border District", placeholder = "County / State", id = "niDistrict" })
            @Html.ValidationMessageFor(model => model.NIAddress.District, "", new { @class = "alert alert-form alert-danger w-100", id = "niDistrictError" })
        </div>
    </div>
</div>

<script>
    'use strict';
    $(document).ready(function () {

        var $roiContainer = $(document).find('#ROI');
        var $roiRequired = $(document).find('#isROIBoxFieldRequired');
        var $roiRadio = $(document).find('#ire');

        var $poContainer = $(document).find('#PO');
        var $poRequired = $(document).find('#isPOBoxFieldRequired');
        var $poRadio = $(document).find('#PoBox');

        var $niContainer = $(document).find('#NI');
        var $niRequired = $(document).find('#isNIFieldRequired');
        var $niRadio = $(document).find('#nonIre');

        if ($roiRadio[0].checked || $roiRequired[0].value === true) {
            SelectROI();
        } else if ($poRadio[0].checked || $poRequired[0].value === true) {
            SelectPO();
        } else if ($niRadio[0].checked || $niRequired[0].value === true) {
            SelectNI();
        }

        $roiRadio.change(function() {
            SelectROI();
        })
        $poRadio.change(function() {
            SelectPO();
        })
        $niRadio.change(function () {
            SelectNI();
        })

        function ToggleContainerVisibility(roi, po, ni) {
            if (roi) {
                $roiContainer.removeClass('d-none');
                $roiRequired[0].value = true;
            }
            else {
                $roiContainer.addClass('d-none');
                $roiRequired[0].value = false;
            }
            if (po) {
                $poContainer.removeClass('d-none');
                $poRequired[0].value = true;
            }
            else {
                $poContainer.addClass('d-none');
                $poRequired[0].value = false;
            }
            if (ni) {
                $niContainer.removeClass('d-none');
                $niRequired[0].value = true;
            }
            else {
                $niContainer.addClass('d-none');
                $niRequired[0].value = false;
            }
        }

        function SelectROI() {
            ToggleContainerVisibility(true, false, false);
        }

        function SelectPO() {
            ToggleContainerVisibility(false, true, false);
        }

        function SelectNI() {
            ToggleContainerVisibility(false, false, true);
        }
    
    });
</script>