@using EI.RP.WebApp.Flows.AppFlows.Plan.Components.AccountBilling
@using EI.RP.WebApp.Flows.AppFlows
@using EI.RP.WebApp.Infrastructure.Extensions
@using EI.RP.WebApp.Infrastructure.Extensions

@model ViewModel

@{
    var daysOfMonth = Enumerable.Range(1, 28)
        .Select(i => new SelectListItem
        {
            Text = i.ToString(), 
            Value = i.ToString()
        });
}

<div class="plan-billing-monthly-billing mb-5">
    <div class="row mb-4">
        <div class="col-6 mb-0">
            <h3 id="monthly-billing-label" class="m-0" data-testid="monthly-billing-heading">Monthly billing</h3>
        </div>
        <div class="col-6 text-right">
            <input type="checkbox" 
                   data-testid="monthly-billing-toggle"
                   @(Model.MonthlyBilling.IsMonthlyBillingActive && !Model.IsContractPending ? "checked" : "") 
                   @(Model.MonthlyBilling.CanSwitchToMonthlyBilling && !Model.IsContractPending ? "" : "disabled") 
                   data-toggle="toggle"
                   aria-labelledby="monthly-billing-label"
                   data-monthly-toggle>
        </div>
    </div>
    @if (Model.MonthlyBilling.IsMonthlyBillingActive) 
    {
        <div class="row mb-4">
            <div class="col-12 mb-0">
                <p class="m-0" data-testid="monthly-bill-text">Your bill is issued on the @Model.MonthlyBillingDayOfTheMonth.ToOrdinal() of every month. Payment will be due approximately 14 days after this date.</p>
            </div>
        </div>

        @if (Model.MonthlyBilling.CanSwitchToMonthlyBilling)
        {
            <div class="row">
                <div class="col-12 mb-0">
                    <a href="#" class="btn btn-xs green" data-monthly-change  data-testid="monthly-bill-change-date">Change date</a>
                </div>
            </div>
        }
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12 mb-0">
                <p class="m-0" data-testid="bimonthly-bill-text">Monthly billing is not active. Your bill is currently issued every two months.</p>
            </div>
        </div>
    }
</div>

<div id="monthly-change" class="modal modal-lg fade modal-portal modal-plan" tabindex="-1" role="dialog" aria-labelledby="monthly-change-title" aria-hidden="true" data-monthly-change-modal data-testid="monthly-bill-change-modal" data-trap-focus>
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @using (await Html.BeginUiFlowFormAsync(Model.ScreenModel, htmlId: "monthly-change-form"))
            {
                <div class="modal-header">
                    <h1 class="modal-title" id="monthly-change-title" data-testid="monthly-bill-change-modal-heading">What date would you like your bill on?</h1>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" data-monthly-reverse>
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <div class="form-group w-100 text-left">
                        <label for="@Html.IdFor(model => model.MonthlyBillingDayOfTheMonth)" class="m-0 mb-2" data-testid="monthly-bill-change-modal-label">Day of the month</label>
                        <p class="smaller m-0 mb-3" data-testid="monthly-bill-change-modal-text">Payment will be due approximately 14 days after this date</p>
                        @Html.DropDownListFor(model => model.MonthlyBillingDayOfTheMonth, daysOfMonth, new { @class = "custom-select w-100", @data_testid = "monthly-bill-change-modal-dates" })
                    </div>
                    <p class="w-100">
                        <flow-action class="btn btn-primary"
                                     data-testid="monthly-bill-change-modal-continue"
                                     trigger-event="@Model.MonthlyBilling.SwitchOnMonthlyBilling">
                            Continue
                        </flow-action>
                    </p>
                </div>
                <div class="modal-footer no-flex">
                    <button class="btn btn-xs green" data-dismiss="modal" data-monthly-reverse data-testid="monthly-bill-change-modal-cancel">Cancel</button>
                </div>
            }
        </div>
    </div>
</div>

<div id="monthly-cancel" class="modal modal-lg fade modal-portal modal-plan" tabindex="-1" role="dialog" aria-labelledby="monthly-cancel-title" aria-hidden="true" data-monthly-cancel-modal data-testid="cancel-monthly-billing-modal" data-trap-focus>
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title" id="monthly-cancel-title" data-testid="cancel-monthly-billing-modal-heading">Are you sure you want to cancel monthly billing?</h1>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" data-monthly-reverse>
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-center">
                <p data-testid="cancel-monthly-billing-modal-text">Your electricity bill will be issued every two months, and you'll no longer be able to select a billing date of your choice.</p>
                <p class="w-100">
                    @using (await Html.BeginUiFlowFormAsync(Model.ScreenModel, htmlId: "monthly-cancel-form"))
                    {
                        @Html.Hidden("ShouldValidateMeterData", false)
                        <flow-action class="btn btn-primary"
                                     data-testid="cancel-monthly-billing-modal-continue"
                                     trigger-event="@Model.MonthlyBilling.SwitchOffMonthlyBilling">
                            Continue
                        </flow-action>
                    }
                </p>
            </div>
            <div class="modal-footer no-flex">
                <button class="btn btn-xs green" data-dismiss="modal" data-monthly-reverse data-testid="cancel-monthly-billing-modal-cancel">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script>
    'use strict';
    document.addEventListener('DOMContentLoaded',
        function (event) {
            var paperless = {};
            paperless.toggle = {
                element: $('[data-monthly-toggle]'),
                modals: undefined,
                Bind: function () {
                    var that = this;
                    if (that.element) {
                        that.element.on('change',
                            function (e) {
                                if (that.element.prop('checked') === false) {
                                    that.modals.cancel.modal('show');
                                }
                                else {
                                    that.modals.change.modal('show');
                                }
                            });
                    }
                },
                Init: function (modalsEls) {
                    this.modals = modalsEls;
                    this.Bind();
                }
            };
            paperless.modal = {
                modals: {
                    cancel: $('[data-monthly-cancel-modal]'),
                    change: $('[data-monthly-change-modal]')
                },
                buttons: {
                    reverse: $('[data-monthly-reverse]'),
                    change: $('[data-monthly-change]')
                },
                skipReverse: false,
                toggle: undefined,
                Bind: function () {
                    var that = this;
                    if (that.buttons.reverse) {
                        that.buttons.reverse.on('click',
                            function (e) {
                                if (that.skipReverse) {
                                    that.skipReverse = false;
                                    return;
                                }
                                that.toggle.element.bootstrapToggle(that.toggle.element.prop('checked') ? 'off' : 'on', true);
                            });
                    }
                    if (that.buttons.change) {
                        that.buttons.change.on('click',
                            function(e) {
                                e.preventDefault();
                                that.skipReverse = true;
                                that.modals.change.modal('show');
                            });
                    }
                },
                Init: function (toggleObj) {
                    this.toggle = toggleObj;
                    this.Bind();
                }
            };
            paperless.Init = function () {
                paperless.toggle.Init(this.modal.modals);
                paperless.modal.Init(this.toggle);
            };
            paperless.Init();
        },
        false);
</script>
