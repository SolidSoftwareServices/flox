@using EI.RP.UiFlows.Mvc.Components.PreLoad
@using EI.RP.WebApp.Infrastructure.Extensions
@using EI.RP.WebApp.Flows.AppFlows.SmartActivation.Steps
@using EI.RP.WebApp.DomainModelExtensions
@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering

@model EI.RP.WebApp.Flows.AppFlows.SmartActivation.Steps.Step5Summary.ScreenModel

@functions
{
enum PageComponent
{
    Navigation = 1,
    Stepper
}
}

@{
    var componentPreLoader = new ComponentPreLoader<PageComponent>(Component, Model);

    componentPreLoader.StartLoading<EI.RP.WebApp.Flows.AppFlows.SmartActivation.Components.SmartActivationNavigation.Component>(PageComponent.Navigation,
        new EI.RP.WebApp.Flows.AppFlows.SmartActivation.Components.SmartActivationNavigation.InputModel 
        {
            SourceFlowType = Model.SourceFlowType
        });

    componentPreLoader.StartLoading<EI.RP.WebApp.Flows.AppFlows.SmartActivation.Components.SmartActivationStepper.Component>(PageComponent.Stepper,
        new EI.RP.WebApp.Flows.AppFlows.SmartActivation.Components.SmartActivationStepper.InputModel
        {
            CurrentStep = 5
        });
}

@await componentPreLoader.Render(PageComponent.Navigation)

<div id="portal-main" class="portal-main">
    <div class="position-relative">
        <div class="sub-navigation-overlay"></div>
        <main class="page page-authorise mb-5 pb-5" data-page="step5-summary">
            <div class="container page-container pt-5 pb-5">
                @await componentPreLoader.Render(PageComponent.Stepper)
                <div class="offset-md-1 col-md-10 summary">
                    <h1 class="text-primary page-title text-left mb-5" data-testid="summary-heading">Summary</h1>
                    <hr class="my-5" aria-hidden="true" />
                    <div class="row">
                        <div class="col">
                            <div class="row">
                                <div class="col">
                                    <p class="your-plan mb-0">Your Plan</p>
                                </div>
                                <div class="col font-weight-bold text-right">
                                    <p class="mb-0" data-testid="selected-plan">@Model.SelectedPlanName</p>
                                </div>
                            </div>
                            <hr class="my-5" aria-hidden="true">
                            <div class="row my-3">
                                <div class="col font-weight-bold"><p class="mb-0">Payment Method</p></div>
                                <div class="col font-weight-light text-right">
                                    <p class="mb-0" data-testid="payment-method">@(Model.AlternativePayer ? "Alternative Payer" : Model.PaymentMethod.ToUserText())</p>
                                </div>
                            </div>
                            <div class="row my-3">
                                <div class="col font-weight-bold"><p class="mb-0">Paperless billing</p></div>
                                <div class="col font-weight-light text-right"><p class="tick mb-0">Active</p></div>
                            </div>
                            <div class="row my-3">
                                <div class="col font-weight-bold"><p class="mb-0">Bill frequency</p></div>
                                <div class="col font-weight-light text-right">
                                    @if (Model.MonthlyBilling)
                                    {
                                        <p class="mb-0" data-testid="bill-frequency"><strong>@Model.MonthlyBillingSelectedDay.ToOrdinal()</strong> of each month</p>
                                    }
                                    else
                                    {
                                        <p class="mb-0" data-testid="bill-frequency">Every 2 months</p>
                                    }
                                </div>
                            </div>
                            <hr class="my-5" aria-hidden="true"/>
                            @using (await Html.BeginUiFlowFormAsync(Model))
                            {
                                @await Html.SecureHiddenForAsync(m => Model.MonthlyBilling, false)
                                @await Html.SecureHiddenForAsync(m => Model.MonthlyBillingSelectedDay, false)
                                <div class="form-group-wrapper">
                                    <div class="form-group form-check form-check--border form-check-only">
                                        <div class="custom-control custom-checkbox">
                                            @Html.CheckBoxFor(model => model.TermsAndConditionsAccepted, new { @class = "custom-control-input pr-0", id = "termsAndConditionsAccepted", name = "termsAndConditionsAccepted" })
                                            <label class="custom-control-label font-weight-normal pr-0"
                                                   for="termsAndConditionsAccepted">
                                                I accept the <a href="@Model.GeneralTermsAndConditionsUrl" target="_blank">electricity and gas general terms & conditions</a> and <a href="@Model.PricePlanTermsAndConditionsUrl" target="_blank">price plan terms & conditions</a>
                                            </label>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.TermsAndConditionsAccepted, "", new { @class = "alert alert-form alert-danger", data_testid = "terms-and-conditions-accepted-validation" })
                                    </div>
                                </div>
                                <div class="btn-container btn-container--center">
                                    <flow-action id="continueButton"
                                                 class="btn btn-primary no-toggle"
                                                 trigger-event="@Step5Summary.StepEvent.RequestCompleteSmartActivation">
                                        Continue
                                    </flow-action>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>