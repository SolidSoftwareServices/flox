@using EI.RP.CoreServices.Platform
@using EI.RP.DomainServices.Infrastructure.Settings
@using Ei.Rp.Mvc.Core.Controllers
@using Ei.Rp.Mvc.Core.Cryptography.AntiTampering
@using EI.RP.WebApp.Controllers.Membership
@using Microsoft.AspNetCore.Hosting
@using EI.RP.WebApp.Flows.AppFlows.Accounts.FlowDefinitions;

@inject IHostingEnvironment HostingEnvironment
@inject IDomainSettings DomainSettings

@model EI.RP.WebApp.Models.Membership.LoginViewModel
@{
    ViewData["Title"] = "Login to your Electric Ireland account";

    var title = Model.Source == AppLoginType.MeterReading
        ? "Meter Reading Login"
        : Model.Source == AppLoginType.AddGas
            ? "Login to Add Gas"
            : Model.Source == AppLoginType.InternalDeploymentLogin
                ? "Admin Login"
                : "Account Login";

    var subtitle = Model.Source == AppLoginType.MeterReading || Model.Source == AppLoginType.AddGas
        ? ""
        : Model.Source == AppLoginType.SmartHubPage
            ? "To access Smart Services, you’ll first need to log into your online account"
            : Model.Source == AppLoginType.InternalDeploymentLogin
                ? "Login to access the Admin portal"
                : "Login to your online account";
}

<div data-page="login">
    <h1 class="page-login__title" data-testid="title">@title</h1>
    @if (!string.IsNullOrWhiteSpace(subtitle))
    {
        <p id="loginSubtitle" class="page-login__subtitle mb-5" data-testid="subtitle">@subtitle</p>
    }
    @using (Html.BeginForm("Login", "Login", FormMethod.Post, new { id = "loginForm" }))
    {
        @await Html.HoneypotForAsync(m => m.PotText)
        @await Html.SecureHiddenForAsync(m => m.Source, false)
	    @await Html.SecureHiddenForAsync(m => m.ReturnUrl, false)
        <div class="form-group w-100">
            <label for="@(DomainSettings.IsInternalDeployment ? "txtUserName" : "txtEmail")">Email Address</label>
            @Html.TextBoxFor(model => model.LoginFormData.UserName,
                new
                {
                    @class = "form-control w-100",
                    id = DomainSettings.IsInternalDeployment ? "txtUserName" : "txtEmail",
                    type = DomainSettings.IsInternalDeployment ? "text" : "email",
                    placeholder = DomainSettings.IsInternalDeployment ? "User Name" : "sample@email.com",
                    autocomplete = "email",
	                @maxlength = "60"
                })                         
            @Html.ValidationMessageFor(model => model.LoginFormData.UserName, "", new { @class = "alert alert-form alert-danger w-100" })
        </div>

        <div class="form-group w-100">
            <label for="txtPassword">Password</label>
            <div class="position-relative">
               @Html.PasswordFor(model => model.LoginFormData.Password,
               new
               {
                   @class = "form-control w-100",
	               @maxlength = "40",
                   id = "txtPassword",
                   type = "password",
                   placeholder = "********",
                   autocomplete = "current-password"
               })
               <button type="button" class="toggle-password-visibility" aria-label="Show Password">show</button>
            </div>           
            @Html.ValidationMessageFor(model => model.LoginFormData.Password, "", new { @class = "alert alert-form alert-danger w-100" })
        </div>

        @if (Model.Source != AppLoginType.InternalDeploymentLogin)
        {
            <div class="row mb-5">
                <div class="col-7">
                    @*<div class="form-check">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="customCheck12" />
                                <label class="custom-control-label" for="customCheck12"
                                       aria-label="Remember me">Remember me</label>
                            </div>
                        </div>*@
                </div>
                <div class="col-5 text-right">
                    <a id="forgotPasswordLink"
                       class="btn-xs btn-xs--no-icon"
                       asp-controller="@typeof(ForgotPasswordController).GetNameWithoutSuffix()"
                       asp-action="@nameof(ForgotPasswordController.ResetPassword)">Forgot Password</a>
                </div>
            </div>
        }

        @Html.ValidationSummary(true, "", new
        {
            @class = "alert alert-form alert-danger w-100 mt-5 mb-5",
            role = "alert"
        })

        <div class="row">
            <div class="col-12 col-md-auto mb-5 text-center text-sm-left">
                <button id="btnLogin" class="btn btn-primary btn-lg" type="submit">Login</button>
            </div>
            @if (Model.Source != AppLoginType.InternalDeploymentLogin)
            {
                <div id="createAccountTagline" class="col-12 col-md-auto text-center text-sm-left mb-5">
                    Don't have an online account? <a id="createAccountLink"
                                                     class="btn btn-xs"
                                                     asp-controller="OnlineAccount"
                                                     asp-action="CreateOnlineAccountView"
                                                     asp-route-Source="@Model.Source">Sign up</a>
                </div>
            }
        </div>

        @if (Model.Source != AppLoginType.InternalDeploymentLogin)
        {
            <p id="paygTagline" class="text-center text-sm-left">
                <a href="https://electricireland.payzone.ie/Account/LogOn" id="paygLink" class="btn btn-secondary">I'm a PAYG customer</a>
            </p>
        }
    }
</div>

@section images
{
    <div class="page-login__img" style="background-image: url('@Url.Content("~/img/login-signup-bg.jpg")')"></div>
}
