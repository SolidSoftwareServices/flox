
@using EI.RP.NavigationPrototype.Flows
@using EI.RP.NavigationPrototype.Flows.AppFlows
@using EI.RP.NavigationPrototype.Flows.AppFlows.GreenFlow.Steps
@using EI.RP.NavigationPrototype.Infrastructure

@model EI.RP.NavigationPrototype.Flows.AppFlows.GreenFlow.Steps.StepCScreen.StepCScreenScreenModel
@{
	ViewData["Title"] = "GreenFlow::StepCScreen";
}
<div id="GreenFlowPage">
	<div class="row">
		<div class="col-md-3">
			<h2>Process GreenFlow::StepCScreen</h2>
		</div>
	</div>
	@using (await Html.BeginUiFlowFormAsync( Model))
	{

			<div class="row">
				<div class="col-md-3">
					@Html.LabelFor(m => m.FlowInputData, $"Flow start value:{Model.FlowInputData}")
				</div>
			</div>

		<div class="row">
			<div class="col-md-3">
				@Html.LabelFor(m => m.InitialValue, $"Initial screen value:{Model.InitialValue}")
			</div>
		</div>
		@if (Model.StepAValue != null)
		{
			<div class="row">
				<div class="col-md-3">
					@Html.LabelFor(m => m.StepAValue, $"StepA value:{Model.StepAValue}")
				</div>
			</div>
		}
		@if (Model.StepBValue != null)
		{
			<div class="row">
				<div class="col-md-3">
					@Html.LabelFor(m => m.StepBValue, $"StepB value:{Model.StepBValue}")
				</div>
			</div>
		}
		<div class="row">
			<div class="col-md-3">
				<flow-action trigger-event=@StepCScreen.StepEvent.FlowTransitionCompleted>Complete</flow-action>
				<flow-action trigger-event=@StepCScreen.StepEvent.Previous>Previous</flow-action>
				<flow-action trigger-event=@StepCScreen.StepEvent.Reset>Reset</flow-action>
				<flow-action trigger-event=@StepCScreen.StepEvent.StartBlueFlow>Start Blue Flow</flow-action>
			</div>
		</div>
	}
	<div class="row">
		<div class="col-md-3">
			@Html.ValidationSummary()
		</div>
	</div>
</div>
